{"ast":null,"code":"var _jsxFileName = \"/home/ricardo/bankpague/front/src/hooks/ToastContext.tsx\";\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from \"../components/ToastContainer\";\nconst ToastContext = createContext({});\n\nconst ToastProvider = ({\n  children\n}) => {\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    type,\n    title,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(oldMessages => [...oldMessages, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(oldMessages => oldMessages.filter(message => message.id !== id));\n  }, []);\n  return /*#__PURE__*/React.createElement(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(ToastContainer, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction useToast() {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };","map":{"version":3,"sources":["/home/ricardo/bankpague/front/src/hooks/ToastContext.tsx"],"names":["React","createContext","useCallback","useContext","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messages","setMessages","addToast","type","title","description","id","toast","oldMessages","removeToast","filter","message","useToast","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AAcA,MAAMC,YAAY,GAAGN,aAAa,CAAoB,EAApB,CAAlC;;AAEA,MAAMO,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAChD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAkB,EAAlB,CAAxC;AAEA,QAAMQ,QAAQ,GAAGV,WAAW,CAC1B,CAAC;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KAA6D;AAC3D,UAAMC,EAAE,GAAGX,IAAI,EAAf;AAEA,UAAMY,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZH,MAAAA,IAFY;AAGZC,MAAAA,KAHY;AAIZC,MAAAA;AAJY,KAAd;AAOAJ,IAAAA,WAAW,CAACO,WAAW,IAAI,CAAC,GAAGA,WAAJ,EAAiBD,KAAjB,CAAhB,CAAX;AACD,GAZyB,EAa1B,EAb0B,CAA5B;AAgBA,QAAME,WAAW,GAAGjB,WAAW,CAAEc,EAAD,IAAgB;AAC9CL,IAAAA,WAAW,CAACO,WAAW,IACrBA,WAAW,CAACE,MAAZ,CAAmBC,OAAO,IAAIA,OAAO,CAACL,EAAR,KAAeA,EAA7C,CADS,CAAX;AAGD,GAJ8B,EAI5B,EAJ4B,CAA/B;AAMA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,QAAF;AAAYO,MAAAA;AAAZ,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,QADH,eAEE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA/BD;;AAiCA,SAASY,QAAT,GAAuC;AACrC,QAAMC,OAAO,GAAGpB,UAAU,CAACI,YAAD,CAA1B;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASf,aAAT,EAAwBc,QAAxB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport ToastContainer from '~/components/ToastContainer';\n\nexport interface IToastMessage {\n  id: string;\n  type?: 'success' | 'error' | 'info';\n  title: string;\n  description?: string;\n}\n\ninterface IToastContextData {\n  addToast(message: Omit<IToastMessage, 'id'>): void;\n  removeToast(id: string): void;\n}\n\nconst ToastContext = createContext<IToastContextData>({} as IToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n  const [messages, setMessages] = useState<IToastMessage[]>([]);\n\n  const addToast = useCallback(\n    ({ type, title, description }: Omit<IToastMessage, 'id'>) => {\n      const id = uuid();\n\n      const toast = {\n        id,\n        type,\n        title,\n        description,\n      };\n\n      setMessages(oldMessages => [...oldMessages, toast]);\n    },\n    [],\n  );\n\n  const removeToast = useCallback((id: string) => {\n    setMessages(oldMessages =>\n      oldMessages.filter(message => message.id !== id),\n    );\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ addToast, removeToast }}>\n      {children}\n      <ToastContainer messages={messages} />\n    </ToastContext.Provider>\n  );\n};\n\nfunction useToast(): IToastContextData {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };\n"]},"metadata":{},"sourceType":"module"}