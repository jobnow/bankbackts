{"ast":null,"code":"import _toConsumableArray from\"/home/ricardo/bankpague/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/ricardo/bankpague/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useCallback,useContext,useState}from'react';import{uuid}from'uuidv4';import ToastContainer from\"../components/ToastContainer\";var ToastContext=createContext({});var ToastProvider=function ToastProvider(_ref){var children=_ref.children;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var addToast=useCallback(function(_ref2){var type=_ref2.type,title=_ref2.title,description=_ref2.description;var id=uuid();var toast={id:id,type:type,title:title,description:description};setMessages(function(oldMessages){return[].concat(_toConsumableArray(oldMessages),[toast]);});},[]);var removeToast=useCallback(function(id){setMessages(function(oldMessages){return oldMessages.filter(function(message){return message.id!==id;});});},[]);return/*#__PURE__*/React.createElement(ToastContext.Provider,{value:{addToast:addToast,removeToast:removeToast}},children,/*#__PURE__*/React.createElement(ToastContainer,{messages:messages}));};function useToast(){var context=useContext(ToastContext);if(!context){throw new Error('useToast must be used within a ToastProvider');}return context;}export{ToastProvider,useToast};","map":{"version":3,"sources":["/home/ricardo/bankpague/front/src/hooks/ToastContext.tsx"],"names":["React","createContext","useCallback","useContext","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messages","setMessages","addToast","type","title","description","id","toast","oldMessages","removeToast","filter","message","useToast","context","Error"],"mappings":"gTAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,WAA/B,CAA4CC,UAA5C,CAAwDC,QAAxD,KAAwE,OAAxE,CACA,OAASC,IAAT,KAAqB,QAArB,CAEA,MAAOC,CAAAA,cAAP,KAA2B,8BAA3B,CAcA,GAAMC,CAAAA,YAAY,CAAGN,aAAa,CAAoB,EAApB,CAAlC,CAEA,GAAMO,CAAAA,aAAuB,CAAG,QAA1BA,CAAAA,aAA0B,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eAChBL,QAAQ,CAAkB,EAAlB,CADQ,wCACzCM,QADyC,eAC/BC,WAD+B,eAGhD,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,CAC1B,eAA6D,IAA1DW,CAAAA,IAA0D,OAA1DA,IAA0D,CAApDC,KAAoD,OAApDA,KAAoD,CAA7CC,WAA6C,OAA7CA,WAA6C,CAC3D,GAAMC,CAAAA,EAAE,CAAGX,IAAI,EAAf,CAEA,GAAMY,CAAAA,KAAK,CAAG,CACZD,EAAE,CAAFA,EADY,CAEZH,IAAI,CAAJA,IAFY,CAGZC,KAAK,CAALA,KAHY,CAIZC,WAAW,CAAXA,WAJY,CAAd,CAOAJ,WAAW,CAAC,SAAAO,WAAW,qCAAQA,WAAR,GAAqBD,KAArB,IAAZ,CAAX,CACD,CAZyB,CAa1B,EAb0B,CAA5B,CAgBA,GAAME,CAAAA,WAAW,CAAGjB,WAAW,CAAC,SAACc,EAAD,CAAgB,CAC9CL,WAAW,CAAC,SAAAO,WAAW,QACrBA,CAAAA,WAAW,CAACE,MAAZ,CAAmB,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACL,EAAR,GAAeA,EAAnB,EAA1B,CADqB,EAAZ,CAAX,CAGD,CAJ8B,CAI5B,EAJ4B,CAA/B,CAMA,mBACE,oBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEJ,QAAQ,CAARA,QAAF,CAAYO,WAAW,CAAXA,WAAZ,CAA9B,EACGV,QADH,cAEE,oBAAC,cAAD,EAAgB,QAAQ,CAAEC,QAA1B,EAFF,CADF,CAMD,CA/BD,CAiCA,QAASY,CAAAA,QAAT,EAAuC,CACrC,GAAMC,CAAAA,OAAO,CAAGpB,UAAU,CAACI,YAAD,CAA1B,CAEA,GAAI,CAACgB,OAAL,CAAc,CACZ,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8CAAV,CAAN,CACD,CAED,MAAOD,CAAAA,OAAP,CACD,CAED,OAASf,aAAT,CAAwBc,QAAxB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport ToastContainer from '~/components/ToastContainer';\n\nexport interface IToastMessage {\n  id: string;\n  type?: 'success' | 'error' | 'info';\n  title: string;\n  description?: string;\n}\n\ninterface IToastContextData {\n  addToast(message: Omit<IToastMessage, 'id'>): void;\n  removeToast(id: string): void;\n}\n\nconst ToastContext = createContext<IToastContextData>({} as IToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n  const [messages, setMessages] = useState<IToastMessage[]>([]);\n\n  const addToast = useCallback(\n    ({ type, title, description }: Omit<IToastMessage, 'id'>) => {\n      const id = uuid();\n\n      const toast = {\n        id,\n        type,\n        title,\n        description,\n      };\n\n      setMessages(oldMessages => [...oldMessages, toast]);\n    },\n    [],\n  );\n\n  const removeToast = useCallback((id: string) => {\n    setMessages(oldMessages =>\n      oldMessages.filter(message => message.id !== id),\n    );\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ addToast, removeToast }}>\n      {children}\n      <ToastContainer messages={messages} />\n    </ToastContext.Provider>\n  );\n};\n\nfunction useToast(): IToastContextData {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };\n"]},"metadata":{},"sourceType":"module"}