{"ast":null,"code":"var _jsxFileName = \"/home/ricardo/bankpague/go-barber-web-ts/src/pages/ResetPassword/index.tsx\";\nimport React, { useRef, useCallback } from 'react';\nimport { FiLock } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport getValidationErrors from \"../../utils/getValidationErrors\";\nimport api from \"../../services/api\";\nimport { useToast } from \"../../hooks/ToastContext\";\nimport Input from \"../../components/Input\";\nimport Button from \"../../components/Button\";\nimport logoImg from \"../../assets/logo.svg\";\nimport { Container, Content, AnimationContainer, Background } from './styles';\n\nconst ResetPassword = () => {\n  const formRef = useRef(null);\n  const history = useHistory();\n  const location = useLocation();\n  const {\n    addToast\n  } = useToast();\n  const handleSubmit = useCallback(async data => {\n    try {\n      var _formRef$current;\n\n      const {\n        password,\n        password_confirmation\n      } = data;\n      const token = location.search.replace('?token=', '');\n\n      if (!token) {\n        throw new Error();\n      }\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        password: Yup.string().required('Senha obrigatória'),\n        password_confirmation: Yup.string().oneOf([Yup.ref('password'), null], 'Confirmação inválida')\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      await api.post('/password/reset', {\n        password,\n        password_confirmation,\n        token\n      });\n      history.push('/');\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      addToast({\n        type: 'error',\n        title: 'Erro ao resetar senha',\n        description: 'Ocorreu um erro ao resetar a sua senha, tente novamente.'\n      });\n    }\n  }, [location.search, history, addToast]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AnimationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logoImg,\n    alt: \"Go Barber\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Resetar Senha\"), /*#__PURE__*/React.createElement(Input, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Informe a Nova Senha\",\n    icon: FiLock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"password_confirmation\",\n    type: \"password\",\n    placeholder: \"Confirma\\xE7\\xE3o da Nova Senha\",\n    icon: FiLock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Alterar Senha\")))), /*#__PURE__*/React.createElement(Background, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["/home/ricardo/bankpague/go-barber-web-ts/src/pages/ResetPassword/index.tsx"],"names":["React","useRef","useCallback","FiLock","Form","useHistory","useLocation","Yup","getValidationErrors","api","useToast","Input","Button","Container","Content","AnimationContainer","Background","ResetPassword","formRef","history","location","addToast","handleSubmit","data","password","password_confirmation","token","search","replace","Error","current","setErrors","schema","object","shape","string","required","oneOf","ref","validate","abortEarly","post","push","err","ValidationError","errors","type","title","description","logoImg"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback } from 'react';\nimport { FiLock } from 'react-icons/fi';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport * as Yup from 'yup';\nimport getValidationErrors from '~/utils/getValidationErrors';\n\nimport api from '~/services/api';\n\nimport { useToast } from '~/hooks/ToastContext';\n\nimport IResetPasswordFormData from './interfaces/IResetPasswordFormData';\n\nimport Input from '~/components/Input';\nimport Button from '~/components/Button';\n\nimport logoImg from '~/assets/logo.svg';\n\nimport { Container, Content, AnimationContainer, Background } from './styles';\n\nconst ResetPassword: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const history = useHistory();\n  const location = useLocation();\n\n  const { addToast } = useToast();\n\n  const handleSubmit = useCallback(\n    async (data: IResetPasswordFormData) => {\n      try {\n        const { password, password_confirmation } = data;\n        const token = location.search.replace('?token=', '');\n\n        if (!token) {\n          throw new Error();\n        }\n\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          password: Yup.string().required('Senha obrigatória'),\n          password_confirmation: Yup.string().oneOf(\n            [Yup.ref('password'), null],\n            'Confirmação inválida',\n          ),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        await api.post('/password/reset', {\n          password,\n          password_confirmation,\n          token,\n        });\n\n        history.push('/');\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n\n          return;\n        }\n\n        addToast({\n          type: 'error',\n          title: 'Erro ao resetar senha',\n          description:\n            'Ocorreu um erro ao resetar a sua senha, tente novamente.',\n        });\n      }\n    },\n    [location.search, history, addToast],\n  );\n\n  return (\n    <Container>\n      <Content>\n        <AnimationContainer>\n          <img src={logoImg} alt=\"Go Barber\" />\n\n          <Form ref={formRef} onSubmit={handleSubmit}>\n            <h1>Resetar Senha</h1>\n\n            <Input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Informe a Nova Senha\"\n              icon={FiLock}\n            />\n\n            <Input\n              name=\"password_confirmation\"\n              type=\"password\"\n              placeholder=\"Confirmação da Nova Senha\"\n              icon={FiLock}\n            />\n\n            <Button type=\"submit\">Alterar Senha</Button>\n          </Form>\n        </AnimationContainer>\n      </Content>\n      <Background />\n    </Container>\n  );\n};\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}